package Level2.BridgeOverTruck;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Stack;

/*
 * Question : 
	트럭 여러 대가 강을 가로지르는 일차선 다리를 정해진 순으로 건너려 합니다. 모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 알아내야 합니다. 
	다리에는 트럭이 최대 bridge_length대 올라갈 수 있으며, 다리는 weight 이하까지의 무게를 견딜 수 있습니다. 단, 다리에 완전히 오르지 않은 트럭의 무게는 무시합니다.

	예를 들어, 트럭 2대가 올라갈 수 있고 무게를 10kg까지 견디는 다리가 있습니다. 무게가 [7, 4, 5, 6]kg인 트럭이 순서대로 최단 시간 안에 다리를 건너려면 다음과 같이 건너야 합니다.
	
	경과 시간	다리를 지난 트럭	다리를 건너는 트럭	대기 트럭
	0	[]	[]	[7,4,5,6]
	1~2	[]	[7]	[4,5,6]
	3	[7]	[4]	[5,6]
	4	[7]	[4,5]	[6]
	5	[7,4]	[5]	[6]
	6~7	[7,4,5]	[6]	[]
	8	[7,4,5,6]	[]	[]
	따라서, 모든 트럭이 다리를 지나려면 최소 8초가 걸립니다.
	
	solution 함수의 매개변수로 다리에 올라갈 수 있는 트럭 수 bridge_length, 다리가 견딜 수 있는 무게 weight, 트럭 별 무게 truck_weights가 주어집니다. 
	이때 모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 return 하도록 solution 함수를 완성하세요.
 * 
 * 	output : 8
 * 
 * 	Solution : 1. 어렵지는 않았던 문제
 * 			   2. 큐를 활용하여 poll 했을 때의 경우의 수를 보면 됨.
 * 			   3. 큐가 비어있을 때(최초 진입), 큐의 길이가 max와 같을 때(else-if), 큐를 비울때(else)
 * 			   4. 
 * 
 * 
 * */

public class Solution {
   
	public int solution(int bridge_length, int weight, int[] truck_weights) {
        int answer = 0;
        Queue<Integer> truckQueue = new LinkedList<Integer>();
        int totSum = 0;
        
        for(int val : truck_weights) {
        	while(true) {
        		if(truckQueue.isEmpty()) { // 큐가 비어있으면
        			truckQueue.offer(val);
        			answer++;
        			totSum += val;
        			break;
        		} else if(truckQueue.size() == bridge_length) { // 길이가 같으면
        			totSum -= truckQueue.poll();
        		} else { // 큐가 비어있지 않을 경우
        			if((totSum + val) > weight) {
        				truckQueue.offer(0);
        				answer++;
        			} else {
        				truckQueue.offer(val);
        				totSum += val;
        				answer++;
        				break;
        			}
        		}
        	}
        }
        
        answer += bridge_length;
        
        return answer;
    }
    
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Solution sol = new Solution();
		int bridge_length = 2;
		int weight = 10;
		int[] truck_weights = {7, 4, 5, 6};
		System.out.println(sol.solution(bridge_length, weight, truck_weights));
	}
}